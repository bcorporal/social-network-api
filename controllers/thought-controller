const { Thought, User } = require('../models');

const thoughtController = {

  getThoughts(req, res) {
    Thought.find()
      .then((thoughts) => res.json(thoughts))
      .catch(err => res.status(500).json(err));
  },

  // Get a thought by id
  getThoughtById(req, res) {
    Thought.findOne({ _id: req.params.id })
      .then((thoughts) =>
        !thoughts
          ? res.status(404).json({ message: 'No thought with that ID' })
          : res.json(thoughts)
      )
      .catch((err) => res.status(500).json(err));
  },

  // Create a thought
  createThought(req, res) {
    Thought.create(req.body)
      .then(({ _id }) => {
        return User.findOneAndUpdate(
          { _id: req.body.userId },
          { $push: { thoughts: _id } },
          { new: true }
        );
      })
      .then((user) =>
        !user
          ? res.status(404).json({
            message: 'User ID Not Found'
          })
          : res.json('Thought Created')
      )
      .catch(err => res.json(err));
  },

  // Delete a thought
  deleteThought(req, res) {
    Thought.findOneAndDelete({ _id: req.params.thoughtId })
      .then((thought) =>
        !thought
          ? res.status(404).json({ message: 'No thought with that ID' })
          : User.findOneAndUpdate(
            { thoughts: req.params.thoughtId },
            { $pull: { thoughts: req.params.thoughtId } },
            { new: true }
          )
      )
      .then((user) =>
        !user
          ? res.status(404).json({ message: 'User ID Not Found' })
          : res.json({ message: 'Thought Deleted' })
      )
      .catch((err) => res.status(500).json(err));
  },

  // Update a thought
  updateThought(req, res) {
    Thought.findOneAndUpdate(
      { _id: req.params.thoughtId },
      { $set: req.body },
      { runValidators: true, new: true }
    )
      .then((thought) =>
        !thought
          ? res.status(404).json({ message: 'No thought with this id!' })
          : res.json(thought)
      )
      .catch((err) => res.status(500).json(err));
  },

  // addReaction
  addReaction(req, res) {
    Thought.findOneAndUpdate(
      { _id: req.params.thoughtId },
      { $set: { reactions: req.body } },
      { new: true }
    )
      .then((data) =>
        !data
          ? res.status(404).json({ message: 'No reaction with this id!' })
          : res.json(data)
      )
      .catch((err) => res.status(500).json(err));
  },


  // deleteReaction
  removeReaction({ params }, res) {
    Thought.findOneAndUpdate({ _id: params.thoughtId },
      { $pull: { reactions: { reactionId: params.reactionId} } },
      { new: true }
    )
      .then((data) =>
        !data
          ? res.status(404).json({ message: 'No reaction with this id!' })
          : res.json(data)
      )
      .catch((err) => res.status(500).json(err));
  },
};

module.exports = thoughtController;
